<resources>
    <string name="app_name">设计模式</string>
    <string name="action_settings">Settings</string>
    <string name="section_format">Hello World from section: %1$d</string>

    <string name="or">或者</string>
    <string name="rn">%s\n%s</string>

    <string name="srp">就一个类而言，应该仅有一个引起它变化的原因，即一个类中应该是一组相关性很高的函数、数据的封装。</string>
    <string name="ocp">软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是，对于修改是封闭的。因此，当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。</string>
    <string name="lsp">所有引用基类的地方必须能透明地使用其子类的对象，即只要父类能出现的地方，子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类；但是反过来就不行了，有子类出现的地方，父类未必就能适应。</string>
    <string name="dip">高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。</string>
    <string name="isp">客户端不应该依赖它不需要的接口，类间的依赖关系应该建立在最小的接口上；接口隔离原则的目的是系统解开耦合，从而容易重构、更改和重新部署。</string>
    <string name="lod">一个对象应该对其他对象有最少的了解，即一个类应该对自己需要耦合或调用的类知道得最少，类的内部何如实现与调用或者依赖者没关系，调用者或者依赖者只需要知道它需要的方法即可，其他的可一概不用管。</string>
</resources>
