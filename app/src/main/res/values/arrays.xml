<?xml version="1.0" encoding="utf-8"?>
<resources>
    <array name="design_patterns">
        <item>单例模式——应用最广的模式</item>
        <item>Builder模式——自由扩展你的项目</item>
        <item>原型模式——使程序运行更高效</item>
        <item>工厂方法模式——应用最广泛的模式</item>
        <item>抽象工厂模式——创建型设计模式</item>
        <item>策略模式——时势造英雄</item>
        <item>状态模式——随遇而安</item>
        <item>责任链模式——使编程更有灵活性</item>
        <item>解释器模式——化繁为简的翻译机</item>
        <item>命令模式——让程序畅通执行</item>
        <item>观察者模式——解决解耦的钥匙</item>
        <item>备忘录模式——编程中的“后悔药”</item>
        <item>迭代器模式——解决问题的“第三者”</item>
        <item>模板方法模式——抓住问题核心</item>
        <item>访问者模式</item>
        <item>中介者模式——“和事佬”</item>
        <item>代理模式——编程好帮手</item>
        <item>组合模式——物以类聚</item>
        <item>适配器模式——得心应手的“粘合剂”</item>
        <item>装饰模式</item>
        <item>享元模式——对象共享，避免创建多对象</item>
        <item>外观模式——统一编程接口</item>
        <item>桥接模式——连接两地的交通枢纽</item>
    </array>

    <array name="principles">
        <item>单一职责原则——优化代码的第一步:srp</item>
        <item>开闭原则——让程序更稳定、更灵活:ocp</item>
        <item>里氏替换原则——构建扩展性更好的系统:lsp</item>
        <item>依赖倒置原则——让项目拥有变化的能力:dip</item>
        <item>接口隔离原则——系统有更高的灵活性:isp</item>
        <item>迪米特原则——更好的可扩展性:lod</item>
    </array>

    <array name="singleton_advantages">
        <item>（1）由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。</item>
        <item>（2）由于单例模式只生成一个实例，所以，减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决。</item>
        <item>（3）单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时操作。</item>
        <item>（4）单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射关系。</item>
    </array>

    <array name="singleton_disadvantages">
        <item>（1）单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码，基本上没有第二种途径可以实现。</item>
        <item>（2）单例对象如果持有Context，那么很容易引发内存泄露，此时需要注意传递给单例对象的Context最好是Application Context。</item>
    </array>

    <array name="builder_advantages">
        <item>（1）良好的封装性，使用建造者模式可以使客户端不必知道产品内部组成的细节。</item>
        <item>（2）建造者独立，容易扩展。</item>
    </array>

    <array name="builder_disadvantages">
        <item>会产生多余的Builder对象以及Director对象，消耗内存。</item>
    </array>

    <array name="prototype_advantages">
        <item>原型模式是在内存中二进制流的拷贝，要比直接new一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</item>
    </array>

    <array name="prototype_disadvantages">
        <item>这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发当中应该注意这个潜在的问题。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。</item>
    </array>

    <array name="factory_advantages">
        <item>（1）降低了对象之间的耦合度。</item>
        <item>（2）工厂方法模式依赖于抽象的架构，其将实例化的任务交由子类去完成，有非常好的扩展性。</item>
    </array>

    <array name="factory_disadvantages">
        <item>每次我们为工厂方法模式添加新的产品时，就要编写一个新的产品类，同时还要引入抽象层，这必然会导致类结构的复杂化。</item>
    </array>

    <array name="abstract_factory_advantages">
        <item>（1）分离接口与实现，客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体实现的是谁，客户端只是面向产品的接口编程而已，使其从具体的产品实现中解耦。</item>
        <item>（2）基于接口与实现的分离，使抽象工厂模式在切换产品类时更加灵活、容易。</item>
    </array>

    <array name="abstract_factory_disadvantages">
        <item>（1）类文件的爆炸性增加。</item>
        <item>（2）不太容易扩展新的产品类，因为每当我们增加一个产品类就需要修改抽象工厂，那么所有的具体工厂类均会被修改。</item>
    </array>

    <array name="strategy_advantages">
        <item>（1）结构清晰明了、使用简单直观；</item>
        <item>（2）耦合度相对而言较低，扩展方便；</item>
        <item>（3）操作封装也更为彻底，数据更为安全。</item>
    </array>

    <array name="strategy_disadvantages">
        <item>随着策略的增加，子类也会变得繁多。</item>
    </array>

    <array name="state_advantages">
        <item>状态模式将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转换成结构清晰的状态类族，在避免代码膨胀的同时也保证了可扩展性与可维护性。</item>
    </array>

    <array name="state_disadvantages">
        <item>状态模式的使用必然会增加系统类和对象的个数。</item>
    </array>

    <array name="responsibility_advantages">
        <item>对请求者和处理者关系解耦，提高代码的灵活性。</item>
    </array>

    <array name="responsibility_disadvantages">
        <item>对链中的请求处理者的遍历，如果处理者太多，那么遍历必定会影响性能，特别是在一些递归调用中，要慎重。</item>
    </array>

    <array name="observer_advantages">
        <item>（1）观察者和被观察者之间是抽象耦合，应对业务变化；</item>
        <item>（2）增强系统灵活性、可扩展性。</item>
    </array>

    <array name="observer_disadvantages">
        <item>在应用观察者模式时需要考虑一下开发效率和运行效率问题，程序中包括一个被观察者、多个观察者，开发和调试等内容会比较复杂，而且在Java中消息的通知默认是顺序执行，一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般考虑采用异步的方式。</item>
    </array>

    <array name="memoto_advantages">
        <item>（1）给用户提供了一种可以回复状态的机制，可以使用户能够比较方便地回到某个历史的状态。</item>
        <item>（2）实现了信息的封装，使得用户不需要关心状态的保存细节。</item>
    </array>

    <array name="memoto_disadvantages">
        <item>消耗资源，如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</item>
    </array>

    <array name="iterator_advantages">
        <item>支持以不同的方式去遍历一个容器对象，也可以有多个遍历，弱化了容器类与遍历算法之间的关系。</item>
    </array>

    <array name="iterator_disadvantages">
        <item>对类文件的增加。</item>
    </array>

    <array name="template_advantages">
        <item>（1）封装不变部分，扩展可变部分。</item>
        <item>（2）提取公共部分代码，便于维护。</item>
    </array>

    <array name="template_disadvantages">
        <item>模板方法会带来代码阅读的难度，会让用户觉得难以理解。</item>
    </array>

    <array name="visitor_advantages">
        <item>（1）个角色职责分离，符合单一职责原则。</item>
        <item>（2）具有优秀的扩展性。</item>
        <item>（3）使得数据结构和作用于结构上的操作解耦，使得操作集合可以独立变化。</item>
        <item>（4）灵活性。</item>
    </array>

    <array name="visitor_disadvantages">
        <item>（1）具体元素对访问者公布细节，违反了迪米特原则。</item>
        <item>（2）具体元素变更时导致修改成本大。</item>
        <item>（3）违反了依赖倒置原则，为了达到“区别对待”而依赖了具体类，没有依赖抽象。</item>
    </array>

    <array name="proxy_advantages">
        <item>代理模式几乎没有什么缺点可言，它是细分化至很小的一种模式。</item>
    </array>

    <array name="proxy_disadvantages">
        <item>所有设计模式的通病：对类的增加。</item>
    </array>

    <array name="composite_advantages">
        <item>（1）组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让高层模块忽略了层次的差异，方便对整个层次结构进行控制。</item>
        <item>（2）高层模块可以一致地使用一个组合结构或其中单个对象，不必关心处理的是个单个对象还是整个组合结构，简化了高层模块的代码。</item>
        <item>（3）在组合模式中增加新的枝干构件和叶子构件都很方便，无须对现有类库进行任何修改，符合“开闭原则”。</item>
        <item>（4）组合模式为树行结构的面向对象实现提供了一种灵活的解决方案，通过叶子对象和枝干对象的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</item>
    </array>

    <array name="composite_disadvantages">
        <item>在新增构件时不好对枝干中的构件类型进行限制，不能依赖类型系统来施加这些约束，因为在大多数情况下，它们都来自于相同的抽象层，此时，必须进行类型检查来实现，这个实现过程较为复杂。</item>
    </array>

    <array name="adapter_advantages">
        <item>（1）更好的复用性，系统需要使用现有的类，而此类的接口不符合系统的需要。那么通过适配器模式就可以让这些功能得到更好的复用。</item>
        <item>（2）更好的扩展性，在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。</item>
    </array>

    <array name="adapter_disadvantages">
        <item>过多地使用适配器，会让系统非常凌乱，不易整体把握。例如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统如果出现太多这种情况，无异于一场灾难。因此，如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。</item>
    </array>

    <array name="flyweight_advantages">
        <item>大大减少应用程序创建的对象，降低程序内存的占用，增强程序的性能。</item>
    </array>

    <array name="flyweight_disadvantages">
        <item>（1）使得系统更加复杂。为了使对象可以共享，需要将一些状态外部化，这使得程序的逻辑复杂化。</item>
        <item>（2）将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长。</item>
    </array>

    <array name="facade_advantages">
        <item>（1）对客户程序隐藏子系统细节，因而减少了客户对于子系统的耦合，能够隔离变化。</item>
        <item>（2）外观类对子系统的接口封装，使得系统更易于使用。</item>
    </array>

    <array name="facade_disadvantages">
        <item>（1）外观类接口膨胀。由于子系统的接口都有外观类统一对外暴露，使得外观类的API接口较多，在一定程度上增加了用户使用成本。</item>
        <item>（2）外观类没有遵循开闭原则，当业务出现变更时，可能需要直接修改外观类。</item>
    </array>

    <array name="bridge_advantages">
        <item>分离抽象与实现，灵活的扩展，对客户端说透明的实现。</item>
    </array>

    <array name="bridge_disadvantages">
        <item>不容易设计，对开发者来说要有一定的经验要求。</item>
    </array>
</resources>