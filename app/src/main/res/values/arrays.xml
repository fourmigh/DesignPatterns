<?xml version="1.0" encoding="utf-8"?>
<resources>
    <array name="design_patterns">
        <item>单例模式——应用最广的模式</item>
        <item>Builder模式——自由扩展你的项目</item>
        <item>原型模式——使程序运行更高效</item>
        <item>工厂方法模式——应用最广泛的模式</item>
        <item>抽象工厂模式——创建型设计模式</item>
        <item>策略模式——时势造英雄</item>
        <item>状态模式——随遇而安</item>
        <item>责任链模式——使编程更有灵活性</item>
        <item>解释器模式——化繁为简的翻译机</item>
        <item>命令模式——让程序畅通执行</item>
        <item>观察者模式——解决解耦的钥匙</item>
        <item>备忘录模式——编程中的“后悔药”</item>
        <item>迭代器模式——解决问题的“第三者”</item>
        <item>模板方法模式——抓住问题核心</item>
        <item>访问者模式</item>
        <item>中介者模式——“和事佬”</item>
        <item>代理模式——编程好帮手</item>
        <item>组合模式——物以类聚</item>
        <item>适配器模式——得心应手的“粘合剂”</item>
        <item>装饰模式</item>
        <item>享元模式——对象共享，避免创建多对象</item>
        <item>外观模式——统一编程接口</item>
        <item>桥接模式——连接两地的交通枢纽</item>
    </array>

    <array name="principles">
        <item>单一职责原则——优化代码的第一步:srp</item>
        <item>开闭原则——让程序更稳定、更灵活:ocp</item>
        <item>里氏替换原则——构建扩展性更好的系统:lsp</item>
        <item>依赖倒置原则——让项目拥有变化的能力:dip</item>
        <item>接口隔离原则——系统有更高的灵活性:isp</item>
        <item>迪米特原则——更好的可扩展性:lod</item>
    </array>
</resources>